# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Drawing {
  id: String!
  imageUrl: String!
  user: User!
}

type Follow {
  id: String!
  createdAt: DateTime!
  follower: User!
  following: User!
  notification: Notification
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Notification {
  id: String!
  type: String!
  createdAt: DateTime!
  user: User!
  initiator: User
  story: Story
  like: Like
  comment: Comment
  follow: Follow
}

type Comment {
  id: String!
  content: String!
  createdAt: DateTime!
  user: User!
  story: Story!
  likesCount: Float!
  repliesCount: Float!
  isLiked: Boolean!
  parentComment: Comment
  parentReply: Comment
}

type Like {
  id: String!
  entityType: String!
  createdAt: DateTime!
  user: User!
  story: Story
  comment: Comment
}

type Favorite {
  id: String!
  createdAt: DateTime!
  user: User!
  story: Story!
}

type Share {
  id: String!
  createdAt: DateTime!
  user: User!
  story: Story!
}

type Story {
  id: String!
  musicId: String
  title: String!
  description: String!
  createdAt: DateTime!
  user: User!
  likesCount: Float!
  commentsCount: Float!
  favoritesCount: Float!
  sharesCount: Float!
  isLiked: Boolean!
  isFavorited: Boolean!
  isShared: Boolean!
}

type UserMetadata {
  id: String!
}

type User {
  id: String!
  username: String!
  displayName: String!
  bio: String!
  imageUrl: String
  createdAt: DateTime!
  followingCount: Float!
  followersCount: Float!
  friendsCount: Float!
  likesCount: Float!
  isFollowedBy: Boolean!
  isFollowing: Boolean!
}

type UserExistsResponse {
  exists: Boolean!
}

type LikesCountResponse {
  count: Float!
}

type UnlikeResponse {
  success: Boolean!
}

type FollowsCountResponse {
  count: Float!
}

type UnfollowResponse {
  success: Boolean!
}

type GenerateCodeResponse {
  success: Boolean!
  message: String!
}

type AuthResponse {
  access_token: String!
  refresh_token: String!
  user: User!
}

type RefreshTokenResponse {
  access_token: String!
}

type CommentsCountResponse {
  count: Float!
}

type RemoveCommentResponse {
  success: Boolean!
}

type FavoritesCountResponse {
  count: Float!
}

type RemoveFavoriteResponse {
  success: Boolean!
}

type SharesCountResponse {
  count: Float!
}

type LikeNotification {
  id: String!
  type: NotificationType!
  initiator: User!
  createdAt: DateTime!
  story: Story!
  like: Like!
}

enum NotificationType {
  COMMENT
  LIKE
  MENTION
  FOLLOW
}

type CommentNotification {
  id: String!
  type: NotificationType!
  initiator: User!
  createdAt: DateTime!
  story: Story!
  comment: Comment
}

type MentionNotification {
  id: String!
  type: NotificationType!
  initiator: User!
  createdAt: DateTime!
  story: Story!
  comment: Comment
}

type FollowNotification {
  id: String!
  type: NotificationType!
  initiator: User!
  createdAt: DateTime!
  follow: Follow!
}

type NotificationsCountSubscribe {
  count: Int!
  userId: String!
}

type UpdateLastViewedDateResponse {
  success: Boolean!
}

type Query {
  getUserByUsername(usernameInput: GetUserByUsernameInput!): User
  getCurrentUser: User!
  ensureUsernameNotExists(usernameInput: GetUserByUsernameInput!): UserExistsResponse!
  getUserStoryLikes(getUserStoryLikesInput: GetUserStoryLikesInput!, paginationInput: PaginationInput): [Like!]!
  getStoryLikesCount(likesCountInput: LikeStoryInput!): LikesCountResponse!
  getCommentLikesCount(likesCountInput: LikeCommentInput!): LikesCountResponse!
  getFollowers(getFollowersInput: FollowInput!, paginationInput: PaginationInput): [Follow!]!
  getFollowing(getFollowingInput: FollowInput!, paginationInput: PaginationInput): [Follow!]!
  getFriends(paginationInput: PaginationInput): [Follow!]!
  getFollowersCount(getFollowersCountInput: FollowInput!): FollowsCountResponse!
  getFollowingCount(getFollowingCountInput: FollowInput!): FollowsCountResponse!
  getStory(getStoryInput: GetStoryInput!): Story
  getAllStories(paginationInput: PaginationInput): [Story!]!
  getUserStories(getUserStoriesInput: GetUserStoriesInput!, paginationInput: PaginationInput): [Story!]!
  getComments(getCommentsInput: GetCommentsInput!, paginationInput: PaginationInput): [Comment!]!
  getReplies(getRepliesInput: GetRepliesInput!, paginationInput: RepliesPaginationInput): [Comment!]!
  getCmmentsCount(getCmmentsCountInput: GetCommentsCountInput!): CommentsCountResponse!
  getUserFavorites(getUserFavoritesInput: GetUserFavoritesInput!, paginationInput: PaginationInput): [Favorite!]!
  getFavoritesCount(getFavoritesCountInput: GetFavoritesCountInput!): FavoritesCountResponse!
  getSharesCount(getSharesCountInput: GetSharesCountInput!): SharesCountResponse!
  getAllNotifications(paginationInput: PaginationInput): [NotificationUnion!]
  getLikesNotifications(paginationInput: PaginationInput): [LikeNotification!]
  getCommentsNotifications(paginationInput: PaginationInput): [CommentNotification!]
  getMentionsNotifications(paginationInput: PaginationInput): [MentionNotification!]
  getFollowsNotifications(paginationInput: PaginationInput): [FollowNotification!]
  getNewNotificationsCount: Float!
}

input GetUserByUsernameInput {
  username: String!
}

input GetUserStoryLikesInput {
  userId: String!
}

input PaginationInput {
  limit: Int! = 10
  cursor: DateTime
}

input LikeStoryInput {
  storyId: String!
}

input LikeCommentInput {
  commentId: String!
}

input FollowInput {
  userId: String!
}

input GetStoryInput {
  storyId: String!
}

input GetUserStoriesInput {
  userId: String!
}

input GetCommentsInput {
  storyId: String!
}

input GetRepliesInput {
  commentId: String!
}

input RepliesPaginationInput {
  limit: Int! = 3
  cursor: DateTime
}

input GetCommentsCountInput {
  storyId: String!
}

input GetUserFavoritesInput {
  userId: String!
}

input GetFavoritesCountInput {
  storyId: String!
}

input GetSharesCountInput {
  storyId: String!
}

union NotificationUnion = LikeNotification | CommentNotification | MentionNotification | FollowNotification

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUsername(usernameInput: UpdateUsernameInput!): User!
  likeStory(likeStoryInput: LikeStoryInput!): Like!
  likeComment(likeCommentInput: LikeCommentInput!): Like!
  unlikeStory(unlikeStoryInput: LikeStoryInput!): UnlikeResponse!
  unlikeComment(unlikeCommentInput: LikeCommentInput!): UnlikeResponse!
  follow(followInput: FollowInput!): Follow!
  unfollow(unfollowInput: FollowInput!): UnfollowResponse!
  updateLastNotificationsViewed: UpdateLastViewedDateResponse!
  generatePhoneCodeForSignup(generateCodeInput: GeneratePhoneCodeInput!): GenerateCodeResponse!
  generateEmailCodeForSignup(generateCodeInput: GenerateEmailCodeInput!): GenerateCodeResponse!
  signupWithPhoneAndCode(signupInput: SignupWithPhoneAndCodeInput!): AuthResponse!
  signupWithEmailAndPassAndCode(signupInput: SignupWithEmailAndPassAndCodeInput!): AuthResponse!
  generatePhoneCodeForLogin(generateCodeInput: GeneratePhoneCodeInput!): GenerateCodeResponse!
  loginWithPhoneAndCode(loginInput: LoginWithPhoneAndCodeInput!): AuthResponse!
  loginWithPhoneAndPass(loginInput: LoginWithPhoneAndPassInput!): AuthResponse!
  loginWithEmailAndPass(loginInput: LoginWithEmailAndPassInput!): AuthResponse!
  loginWithUsernameAndPass(loginInput: LoginWithUsernameAndPassInput!): AuthResponse!
  refreshToken(token: String!): RefreshTokenResponse!
  generatePhoneCodeForReset(generateCodeInput: GeneratePhoneCodeInput!): GenerateCodeResponse!
  generateEmailCodeForReset(generateCodeInput: GenerateEmailCodeInput!): GenerateCodeResponse!
  resetPasswordWithPhone(resetPasswordInput: ResetWithPhoneInput!): AuthResponse!
  resetPasswordWithEmail(resetPasswordInput: ResetWithEmailInput!): AuthResponse!
  createStory(createStoryInput: CreateStoryInput!): Story!
  createDrawing(createDrawingInput: CreateDrawingInput!): Drawing!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createReply(createReplyInput: CreateReplyInput!): Comment!
  removeComment(removeCommentInput: RemoveCommentInput!): RemoveCommentResponse!
  addFavorite(addFavoriteInput: AddFavoriteInput!): Favorite!
  removeFavorite(removeFavoriteInput: AddFavoriteInput!): RemoveFavoriteResponse!
  share(shareInput: ShareInput!): Share!
}

input UpdateUserInput {
  username: String!
  displayName: String!
  bio: String!
}

input UpdateUsernameInput {
  username: String!
}

input GeneratePhoneCodeInput {
  phone: String!
}

input GenerateEmailCodeInput {
  email: String!
}

input SignupWithPhoneAndCodeInput {
  phone: String!
  code: String!
  dateOfBirth: DateTime
}

input SignupWithEmailAndPassAndCodeInput {
  email: String!
  password: String!
  code: String!
  dateOfBirth: DateTime
  receiveEmailUpdates: Boolean
}

input LoginWithPhoneAndCodeInput {
  phone: String!
  code: String!
}

input LoginWithPhoneAndPassInput {
  phone: String!
  password: String!
}

input LoginWithEmailAndPassInput {
  email: String!
  password: String!
}

input LoginWithUsernameAndPassInput {
  username: String!
  password: String!
}

input ResetWithPhoneInput {
  phone: String!
  code: String!
  password: String!
}

input ResetWithEmailInput {
  email: String!
  code: String!
  password: String!
}

input CreateStoryInput {
  musicId: String
  title: String!
  description: String
  drawing: FirstDrawingInput!
}

input FirstDrawingInput {
  imageUrl: String!
}

input CreateDrawingInput {
  storyId: String!
  imageUrl: String!
}

input CreateCommentInput {
  storyId: String!
  content: String!
}

input CreateReplyInput {
  commentId: String!
  content: String!
}

input RemoveCommentInput {
  commentId: String!
}

input AddFavoriteInput {
  storyId: String!
}

input ShareInput {
  storyId: String!
}

type Subscription {
  newNotificationsCountUpdated: NotificationsCountSubscribe!
}